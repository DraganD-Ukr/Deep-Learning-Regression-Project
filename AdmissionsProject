import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras import layers
from tensorflow.keras.layers import InputLayer
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import Normalizer
from sklearn.metrics import r2_score

# Load your data
dataFrame = pd.read_csv('admissions_data.csv')

features = dataFrame.iloc[:, 0:7]
labels = dataFrame.iloc[:, -1]

features_train, features_test, labels_train, labels_test = train_test_split(
    features, labels, test_size=0.3, random_state=42
)

scaler = StandardScaler()
features_train = scaler.fit_transform(features_train)
features_test = scaler.transform(features_test)

dataFrame_train = pd.DataFrame(features_train, columns=features.columns)
dataFrame_test = pd.DataFrame(features_test, columns=features.columns)

my_model = Sequential()
my_model.add(InputLayer(input_shape=(7,)))
my_model.add(Dense(32, activation='relu'))
my_model.add(Dense(8, activation='relu'))
my_model.add(Dense(1))

opt = Adam(learning_rate=0.01)
my_model.compile(loss='mse', metrics=['mae'], optimizer=opt)

# Specify a validation dataset
history = my_model.fit(
    features_train,
    labels_train,
    epochs=50,
    batch_size=32,
    verbose=1,
    validation_data=(features_test, labels_test)  # Add this line
)

# Access training metrics
train_loss = history.history['loss']
train_mae = history.history['mae']

# Access validation metrics
val_loss = history.history['val_loss']
val_mae = history.history['val_mae']

# Create plots for training and validation loss
plt.figure(figsize=(12, 6))

# Plot training and validation loss
plt.subplot(1, 2, 1)
plt.plot(range(1, len(train_loss) + 1), train_loss, label='Training Loss')
plt.plot(range(1, len(val_loss) + 1), val_loss, label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.title('Training and Validation Loss')
plt.legend()

# Plot training and validation MAE
plt.subplot(1, 2, 2)
plt.plot(range(1, len(train_mae) + 1), train_mae, label='Training MAE')
plt.plot(range(1, len(val_mae) + 1), val_mae, label='Validation MAE')
plt.xlabel('Epochs')
plt.ylabel('MAE')
plt.title('Training and Validation MAE')
plt.legend()

plt.tight_layout()
plt.show()

# Evaluate the model on the test data
val_mse, val_mae = my_model.evaluate(features_test, labels_test, verbose=0)
print("Test MSE:", val_mse)
print("Test MAE:", val_mae)

my_model.summary()
